Description: >
    Nicolas Neuburger / Udacity Nanodegree Cloud DevOps Engineer

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource name tags
        Type: String
        Default: UdacityProject
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    PrivateSubnet1CIDR:
        Description: CIDR-Block of the first private subnet
        Type: String
        Default: 10.0.1.0/24
    PrivateSubnet2CIDR:
        Description: CIDR-Block of the second private subnet
        Type: String
        Default: 10.0.2.0/24
    IpCustomerGateway:
        Description: Static IP of Customer Gateway
        Type: String

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    VirtualPrivateGateway:
        Type: AWS::EC2::VPNGateway
        Properties:
            Type: ipsec.1
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    VirtualPrivateGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpnGatewayId: !Ref VirtualPrivateGateway
            VpcId: !Ref VPC

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        DependsOn: VirtualPrivateGatewayAttachment
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref VirtualPrivateGateway

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        DependsOn: VirtualPrivateGatewayAttachment
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref VirtualPrivateGateway

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    CustomerGateway:
        Type: AWS::EC2::CustomerGateway
        Properties:
            BgpAsn: 65000
            IpAddress: !Ref IpCustomerGateway
            Type: ipsec.1
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Customer Gateway

    VPNConnection:
        Type: AWS::EC2::VPNConnection
        Properties:
            CustomerGatewayId: !Ref CustomerGateway
            StaticRoutesOnly: true
            Type: ipsec.1
            VpnGatewayId: !Ref VirtualPrivateGateway
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} VPN Connection

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: ALlow http to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "s{EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0./0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0./0



Outputs:
    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID
    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-RT
    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
          Name: !Sub ${EnvironmentName}-PRI2-RT
    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ "," , [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS
